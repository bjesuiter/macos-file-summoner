name: Go Build & Release

on:
  push:
    # Sequence of patterns matched against refs/tags
    branches:
      # Note: One commit on master with a tag will trigger the pipeline twice
      # (although one time in build-only mode and with the tag in deploy mode)
      - master
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
env:
  MACOS_APP_ARTIFACT: 'File Summoner.app'
  DIST_DIR: 'dist'
  MACOS_DMG_ARTIFACT_ID: 'file-summoner.dmg'
  MACOS_DMG_ARTIFACT_NAME: '<will be set in deploy job>'
  DMG_DELIVERY: false

jobs:
  prepare:
    name: Prepare Environment
    runs-on: ubuntu-latest
    # Outputs accessible to other jobs by:
    # needs: ['prepare']
    # ${{needs.prepare.outputs.variable}}, where variable is one of the outputs defined below
    outputs:
      # Env var name: BRANCH_OR_TAG_NAME
      branchOrTagName: ${{steps.setBranchOrTagName.outputs.value}}
      # Env var name: APP_VERSION
      appVersion: ${{steps.setAppVersion.outputs.value}}
      # Evn var name: MACOS_APP_ZIP
      macosAppZip: ${{steps.setMacosAppZip.outputs.value}}
    steps:
      - uses: actions/checkout@v2

      - name: Extract branch name or tag name from GITHUB_REF
        id: setBranchOrTagName
        run: echo ::set-output name=value::$(echo ${GITHUB_REF} | cut -d / -f 3)

      - name: Extract app version from 'version' file
        id: setAppVersion
        run: echo ::set-output name=value::$(cat ./version)

      - name: Generate zip name for macos deploy zip
        id: setMacosAppZip
        run: echo ::set-output name=value::$(echo ${MACOS_APP_ARTIFACT}-${{steps.setAppVersion.outputs.value}}.zip)

      - name: Show content of github.ref (for debugging purposes of github ref and defined environment at this point)
        run: echo "github.ref ${{github.ref}}"

  build:
    name: Build, Sign & Notarize App
    needs: [prepare]
    runs-on: macOS-latest
    env:
      MACOS_APP_ZIP: ${{needs.prepare.outputs.macosAppZip}}

    steps:
      - uses: actions/checkout@v2

      # Install notarization dependencies
      - run: npm install --global json
      - run: brew tap mitchellh/gon
      - run: brew install mitchellh/gon/gon

      - uses: actions/setup-go@v2
        with:
          go-version: '^1.14.3'

      - name: Build Binary & macOS App
        run: ./scripts/01-build.sh

      ### --Sign Application-- ###
      # import apple code signing certificate - encode with 'base64 -i <in-file>' - prints base64 of file into command line
      - uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_ID_CERT_P12 }}
          p12-password: ${{ secrets.APPLE_DEVELOPER_ID_CERT_PASSWD }}

      - name: Sign macOS app with codesign tool
        run: ./scripts/02-sign-app.sh
        env:
          APPLE_DEVELOPER_ID_CODE: ${{secrets.APPLE_DEVELOPER_ID_CODE}}

      ### --Notarize Application --##
      - name: Notarize App with gon-cli
        run: ./scripts/03-notarize-app.sh
        env:
          APPLE_ACCOUNT_APP_PASSWORD: ${{secrets.APPLE_ACCOUNT_APP_PASSWORD}}

      ### --Validate Signature --###
      - name: Validate App Signature
        run: ./scripts/04-check-app-signature.sh

      - name: Check & Fix execute permission (Debug only)
        run: ./scripts/fix-execute-flag.sh ${DIST_DIR}/${MACOS_APP_ARTIFACT}/Contents/MacOS/macos-file-summoner

      ### --Store App Artifact--###
      - name: Store dist folder with macOS App as Github Artifact
        uses: actions/upload-artifact@v2
        with:
          name: '${{ env.DIST_DIR}}'
          path: '${{ env.DIST_DIR }}'

  package:
    name: Create DMG
    # Using this env var fails for syntactical reasons of github actions
    # if: ${{env.DMG_DELIVERY}}
    if: false
    needs: [build]
    # already installed software on macos-latest worker node:
    # https://github.com/actions/virtual-environments/blob/master/images/macos/macos-10.15-Readme.md
    # Interesting for this workflow:
    # - homebrew
    # - node
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v2

      ###--Restore Caches--###
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{env.BRANCH_OR_TAG_NAME}}-${{runner.os}}-${{ env.cache-name }}
          restore-keys: |
            master-${{ runner.os }}-${{ env.cache-name }}

      - name: Get Homebrew cache dir
        id: homebrew_cache_dir
        run: echo ::set-output name=path::$(brew --cache)

      - name: Cache homebrew modules
        uses: actions/cache@v2
        env:
          cache-name: cache-homebrew-modules
        with:
          path: ${{ steps.homebrew_cache_dir.outputs.path }}
          key: ${{env.BRANCH_OR_TAG_NAME}}-${{runner.os}}-${{ env.cache-name }}
          restore-keys: |
            master-${{ runner.os }}-${{ env.cache-name }}

      ###--Install Dependencies--###
      # The json package is used for notarization, create-dmg util is obvious
      - run: npm install --global create-dmg json
      - run: brew tap mitchellh/gon
      # These brew packages improve the image generated for the dmg & gon is used in notarization
      - run: brew install graphicsmagick imagemagick mitchellh/gon/gon

      ###--Download macOS App Artifact--###
      - name: Download macOS App Artifact
        uses: actions/download-artifact@v1
        with:
          name: '${{ env.DIST_DIR }}'

      ###--Package & Notarize DMG--###
      # This action needs a github secret called MACOS_DEVELOPER_ID
      # which contains a certificate identifier for a signing certificate in the macos keystore,
      # like 'Developer ID Application: Benjamin Jesuiter (BB38WRH6VJ)'

      # import apple code signing certificate - encode with 'base64 -i <in-file>' - prints base64 of file into command line
      - uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_ID_CERT_P12 }}
          p12-password: ${{ secrets.APPLE_DEVELOPER_ID_CERT_PASSWD }}

      - name: Package DMG with sindresorhus create-dmg
        run: ./scripts/package-dmg.sh
        env:
          APPLE_DEVELOPER_ID_NAME: ${{secrets.APPLE_DEVELOPER_ID_NAME}}

      - name: Notarize DMG with gon-cli
        run: ./scripts/notarize-dmg.sh
        env:
          APPLE_ACCOUNT_APP_PASSWORD: ${{secrets.APPLE_ACCOUNT_APP_PASSWORD}}

      - name: Store macOS DMG as Artifact
        uses: actions/upload-artifact@v2
        with:
          name: '${{ env.MACOS_DMG_ARTIFACT_ID }}'
          path: '*.dmg'

  deploy-dmg:
    name: Deploy Release with DMG
    needs: [build]
    # can't use env. in this if statement right now
    # if: startsWith(github.ref, 'refs/tags') && ${{env.DMG_DELIVERY}}
    if: startsWith(github.ref, 'refs/tags') && false
    runs-on: ubuntu-latest
    steps:
      ### --Download macOS DMG Artifact-- ###
      - name: Download macOS DMG Artifact
        uses: actions/download-artifact@v1
        with:
          name: '${{ env.MACOS_DMG_ARTIFACT_ID }}'

      - name: Extract DMG Release Asset Name
        run: cd ${{ env.MACOS_DMG_ARTIFACT_ID }} && echo ::set-env name=MACOS_DMG_ARTIFACT_NAME::$(ls | grep *.dmg)

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ env.BRANCH_OR_TAG_NAME }}
          body: |
            #### Changes in this Release
            TODO
          draft: true
          prerelease: false

      - name: Upload Release DMG
        id: upload-release-dmg
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./${{ env.MACOS_DMG_ARTIFACT_ID }}/${{ env.MACOS_DMG_ARTIFACT_NAME }}
          asset_name: ${{ env.MACOS_DMG_ARTIFACT_NAME }}
          asset_content_type: application/octet-stream

  deploy-zip:
    name: Deploy Release with Zip
    # can't use env. in this if statement right now
    # if: startsWith(github.ref, 'refs/tags') && ! ${{env.DMG_DELIVERY}}
    if: startsWith(github.ref, 'refs/tags')
    # change 'build' in the next statement to 'package' as soon as dmg delivery works
    needs: [prepare, build]
    runs-on: macOS-latest
    env:
      MACOS_APP_ZIP: ${{needs.prepare.outputs.macosAppZip}}
      APP_VERSION: ${{needs.prepare.outputs.appVersion}}
      BRANCH_OR_TAG_NAME: ${{needs.prepare.outputs.branchOrTagName}}

    steps:
      ###--Download macOS App Artifact--###
      - name: Download macOS App Artifact
        uses: actions/download-artifact@v1
        with:
          name: '${{ env.DIST_DIR }}'

      - name: Check & Fix execute permission (only for debugging)
        run: ./scripts/fix-execute-flag.sh ${DIST_DIR}/${MACOS_APP_ARTIFACT}/Contents/MacOS/macos-file-summoner

      - run: echo "Zip App for notarization as ./${MACOS_APP_ZIP}"
      - run: ditto -c -k --rsrc --keepParent "${DIST_DIR}/${MACOS_APP_ARTIFACT}" "${MACOS_APP_ZIP}"

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ env.BRANCH_OR_TAG_NAME }}
          body: |
            #### Changes in this Release
            TODO
          draft: true
          prerelease: false

      - name: Upload Release Zip
        id: upload-release-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./${{ env.MACOS_APP_ZIP }}
          asset_name: ${{ env.MACOS_APP_ZIP }}
          asset_content_type: application/zip
